U "Wire.lv" # import all functions pertaining to wires, agenda, and priority queues. This also already creates the_agenda

V half_adder = F(a, b, s, c)
{
    V d = make_wire()
    V e = make_wire()
    or_gate(a, b, d)
    and_gate(a, b, c)
    inverter(c, e)
    and_gate(d, e, s)
    "ok"
}
V full_adder = F(a, b, c_in, sum, c_out)
{
    V s = make_wire()
    V c1 = make_wire()
    V c2 = make_wire()
    half_adder(b, c_in, s, c1)
    half_adder(a, s, sum, c2)
    or_gate(c1, c2, c_out)
    "ok"
}
V inverter = F(input, output)
{
    V invert_input = F()
    {
        V new_value = logical_not(get_signal(input))
        after_delay(inverter_delay, F() set_signal(output, new_value))
    }
    add_action(input, invert_input)
    "ok"
}
V logical_not = F(s) I s == 0 1 E I s == 1 0 E "Invalid signal " + string(s)
V and_gate = F(a1, a2, output)
{
    V and_action_procedure = F()
    {
        V new_value = logical_and(get_signal(a1), get_signal(a2))
        after_delay(and_gate_delay, F() set_signal(output, new_value))
    }
    add_action(a1, and_action_procedure)
    add_action(a2, and_action_procedure)
    "ok"
}
V logical_and = F(x, y)
    I (x == 1) A (y == 1) 1
    E I (x == 1) A (y == 0) 0
    E I (x == 0) A (y == 1) 0
    E I (x == 0) A (y == 0) 0
    E "Invalid signal " + string(s)
V or_gate = F(a1, a2, output)
{
    V or_action_procedure = F()
    {
        V new_value = logical_or(get_signal(a1), get_signal(a2))
        after_delay(or_gate_delay, F() set_signal(output, new_value))
    }
    add_action(a1, or_action_procedure)
    add_action(a2, or_action_procedure)
    "ok"
}
V logical_or = F(x, y)
    I (x == 1) A (y == 1) 1
    E I (x == 1) A (y == 0) 1
    E I (x == 0) A (y == 1) 1
    E I (x == 0) A (y == 0) 0
    E "Invalid signal " + string(s)
V probe = F(name, wire)
    add_action(wire, F()
        PL(name, " ", current_time(the_agenda), " New_value = ", get_signal(wire)))