################################################
#
# 
#  Game of Sticks, with 'AI'
#
#  Andrew Thomas
#
#  File: p3.py
#
################################################

include "../libs/dictMin.lv"


var inA = F(v,a){ V r = false L x in a {I x == v {r = T}} r }

var Game = class(_player1, _player2, _sticks)
{
   
    #Is the game over? <= 0 in case math goes wrong
    var _isOver = function()
        !(this._sticks > 0)
        
     
    
    #Game logic. Returns either (playerLost, playerWon) that lost or False if  
    # game is not over
    var _turn = function(doPrint)
    {
        #Player 1 turn
        var sticksC = this._sticks + 3
        
        if doPrint
            println("\nThere are ", this._sticks, " sticks on the board.")
        
        while !(inA(sticksC, [1,2,3])) or (sticksC > this._sticks)
        {
            #Sticks is passed for AI
            sticksC = (this._player1.getInput)(this._sticks)
            
            if doPrint
            {
                if !(inA(sticksC, [1,2,3]))
                {
                    println("Please enter a number between 1 and 3 ")
                    println("\nThere are ", this._sticks, " sticks on the board.")
                }
                else if (sticksC > this._sticks)
                {
                    println("Enter a number less than or equal to sticks left.")
                    println("\nThere are ", this._sticks, " sticks on the board.")
                }
            }
        }     
        this._sticks = this._sticks - sticksC
        
        if (this._isOver)()
            [this._player1, this._player2]
        else
        {
            
            #Player2 turn
            sticksC = this._sticks + 3
            
            if doPrint
                println("There are ", this._sticks, " sticks on the board.")
            
            while !(inA(sticksC, [1,2,3])) or (sticksC > this._sticks)
            {
                sticksC = (this._player2.getInput)(this._sticks)
                
                if doPrint
                {
                    if !(inA(sticksC, [1,2,3]))
                    {
                        println("Please enter a number between 1 and 3 ")
                        println("\nThere are ", this._sticks, " sticks on the board.")
                    }
                    else if (sticksC > this._sticks)
                    {
                        println("Enter a number less than or equal to sticks left.")
                        println("\nThere are ", this._sticks, " sticks on the board.")
                    }
                }
            }        
            this._sticks = this._sticks - sticksC
            
            if (this._isOver)()
                [this._player2, this._player1]
            else
                (this._isOver)()
        }
    }
    #Plays a full game
    # Returns the winner -- allows for AI to be trained
    var playGame = function(doPrint)
    {
    
        var v = false
        
        while (v == false)
            v = (this._turn)(doPrint)
            
        if !(v == false)
        {
            #Winner, loser
            [v[1], v[0]]
        }
        else
            none
    }
}

#Basic player class. Gives methods for human players
var Player = class(_name)
{
        
    
    #Gets an input. If not an int, returns 0
    var getInput = function(sticks)
    {
        # Checks to see if input is an int and if it is valid
        var inputString = ""
        while (!(inA(inputString, ["1","2","3"])))
        {
            print(this._name, ": How many sticks do you take (1-3) ")
            inputString = input()
        }
        
         
        #Return the valid input       
        int(inputString)
    }    
    #Method defined to avoid error
    var won = function() {}
    
    var lost = function()
        println(this._name + ", you lose.")
        
}
#AI player (W.O.P.R)
var AI = class(_name, _printFlag)
{
    var _memoryDict = Dictionary()
    var _choicesDict = Dictionary()
    
    
    
    #Chooses from its "memory"
    # If printFlag == True, prints choice
    var getInput = function(sticks)
    {
        var rawInput
        var temp
        
        V dictVal = (this._memoryDict.search)(sticks)
        I dictVal == N dictVal = [1,2,3]; #E dictVal = dictVal + [1,2,3];
        (this._memoryDict.insert)(sticks, dictVal)
        rawInput = (this._memoryDict.search)(sticks)
        temp = sticks + 3
        
        #Ensure the computer chooses a number that will work    
        while temp > sticks
        {
            I (len(rawInput) == 1) temp = rawInput[0]
            E
            temp = rawInput[rand() % len(rawInput)]
        }
            
        (this._choicesDict.insert)(sticks, temp)
        
        if this._printFlag
            println(this._name, " chooses ", temp) 
                        
        temp
    }
    #Adds to the computer memory
    var won = function()
    {
        for x in (this._choicesDict.items)()
        {
            (this._memoryDict.insert)(x[0], (this._memoryDict.search)(x[0]) + [x[1]])
            (this._memoryDict.insert)(x[0], (this._memoryDict.search)(x[0]) + [x[1]])
        }   
        this._memoryDict
    }
    var lost = function()
    {
        V toEnd = F(arr, s)
        {
            if !(len(arr) > s) {[]}
            else [arr[s]] + toEnd(arr, s+1)
        }
        V remove = F(arr, val)
        {
            I !(len(arr) == 0)
            {
                I arr[0] == val
                    toEnd(arr, 1)
                E [arr[0]] + remove(toEnd(arr, 1), val)
            }
            E []
        }
        if this._printFlag
            println(this._name + " loses.")
            
        for x in (this._choicesDict.items)()
        {
            (this._memoryDict.insert)(x[0], remove((this._memoryDict.search)(x[0]), x[1]))
            if !(inA(x[1], (this._memoryDict.search)(x[0])))
            {
                (this._memoryDict.insert)(x[0], (this._memoryDict.search)(x[0]) + [x[1]])
            }
        }
    }
    #Toggles the printFlag for non-spam AI training
    var togglePrint = function()
    {
        this._printFlag = !(this._printFlag)
        this._printFlag
    }
}
#The main menu system
var menu = function()
{
    println("Welcome to the game of sticks!")
    var s = "0"
    var sticksForGame = 0
    while (sticksForGame < 10) or (sticksForGame > 100)
    {
        print("How many sticks are there on the table initially (10-100)? ")
        s = input()
        sticksForGame = int(s)
    }
    println("Options:")
    println(" Play against a friend (1)")
    println(" Play against the computer (2)")
    println(" play against the trained computer (3)")
    var choice = "0"
    var gameType = 0
    while !(inA(choice, ["1","2","3"]))
    {
        print("Which option do you take (1-3)? ")
        choice = input()
    }
    gameType = int(choice)
    [sticksForGame, gameType]
}

var main = F()
{
    var m = menu()
    var sticks = m[0]
    var gameType = m[1] 
    var replay = true
    var player1 = Player("Player 1")
    if gameType == 1
        var player2 = Player("Player 2")
    if gameType == 2
        var player2 = AI("AI", true)
    if gameType == 3
    {
        var player2 = AI("AI", false)
        var trainer = AI("W.O.P.R.", false)
        var x = 10
        println("Training AI, please wait...")
        for i in range(0,x)
        {
            PL("Game ", i)
            var game = Game(trainer, player2, sticks)
            var results = (game.playGame)(false)
            var winner = results[0]
            var loser = results[1] 
            (winner.won)()
            (loser.lost)()
        }
        (player2.togglePrint)()
    }
        
    while replay
    {
        var game = Game(player1, player2, sticks)
        var results = (game.playGame)(true)
        var winner = results[0]
        var loser = results[1]
        (winner.won)()
        (loser.lost)()
        var replaystring = ""
        while !((replaystring == "0") or (replaystring == "1"))
        {
            print("Play again (1 = yes, 0 = no)? ")
            replaystring = input()
        }
        replay = [false, true][int(replaystring)]
    }
}  
main()