#####################
# Dictionary Test
# DPL Project
#####################

var Dictionary = class()
{
    # Node and NodeP are the same thing. Node just defines the var inside the class def,
    # while NodeP defines them in the parameter list
    var Node = class() 
    {
        var key = none;
        var value = none;
        var color = "RED";
        var left = NIL;
        var right = NIL;
        var p = NIL;
        var equals = function(node2) 
        {
            (key == node2.key) and (color == node2.color)
        }
    }
    
    var _NilNode = class() {V key = N V value = N V color = "BLACK" V left = N V right = N V p = N V equals = F(n){(key==n.key) A (color==n.color)}}
    
    var NIL = _NilNode()
    
    var _root = NIL
    
    var left_rotate = function(x)
    {
        if !((x.right.equals)(NIL))
        {
            var y = x.right
            x.right = y.left
            if !((y.left.equals)(NIL)) y.left.p = x
            y.p = x.p
            if (x.p.equals)(NIL)
                _root = y
            else if (x.equals)(x.p.left)
                x.p.left = y
            else
                x.p.right = y
            y.left = x
            x.p = y
        }
    }
    
    var right_rotate = function(x)
    {
        if !((x.left.equals)(NIL))
        {
            var y = x.left
            x.left = y.right
            if !((y.right.equals)(NIL))
                y.right.p = x
            y.p = x.p
            if (x.p.equals)(NIL)
                _root = y
            else if (x.equals)(x.p.right)
                x.p.right = y
            else
                x.p.left = y
            y.right = x
            x.p = y
        }
    }
    
    var tree_insert = function(z)
    {
        var y = NIL
        var x = _root
        while !((x.equals)(NIL))
        {
            y = x
            if _h(z.key) < _h(x.key)
                x = x.left
            else
                x = x.right
        }
        z.p = y
        if (y.equals)(NIL)
            _root = z
        else if _h(z.key) < _h(y.key)
            y.left = z
        else
            y.right = z
    }
    
    var rb_insert = function(x)
    {
        tree_insert(x)
        x.color = "RED"
        var y
        while !((x.equals)(_root)) and (x.p.color == "RED")
        {
            if (x.p.equals)(x.p.p.left)
            {
                y = x.p.p.right
                if y.color == "RED"
                {
                    x.p.color = "BLACK"
                    y.color = "BLACK"
                    x.p.p.color = "RED"
                    x = x.p.p
                }
                else
                {
                    if (x.equals)(x.p.right)
                    {
                        x = x.p
                        left_rotate(x)
                    }
                    x.p.color = "BLACK"
                    x.p.p.color = "RED"
                    right_rotate(x.p.p)
                }
            }
            else
            {
                y = x.p.p.left
                if y.color == "RED"
                {
                    x.p.color = "BLACK"
                    y.color = "BLACK"
                    x.p.p.color = "RED"
                    x = x.p.p
                }
                else
                {
                    if (x.equals)(x.p.left)
                    {
                        x = x.p
                        right_rotate(x)
                    }
                    x.p.color = "BLACK"
                    x.p.p.color = "RED"
                    left_rotate(x.p.p)
                }
            }
        }
        _root.color = "BLACK"
    }
    
    V insert = F(k,v)
    {
        _set(k,v)
        I (_fn(_h(k), _root) == N)
        {
            V y = Node() y.key = k y.value = v rb_insert(y)
        }
        
    }
    
    var printTree = function()
    {
        printTreeNode(_root, 0)
    }
    
    var printTreeNode = function(n, l)
    {
        V spaces = F(l) {I l == 0 "" E " " + spaces(l - 1)}
        if !(n==N)
        if (n.equals)(NIL)
        {
        
        }
        E
        {
            printTreeNode(n.left, l+1);
            println(spaces(l), n.key, ":", n.value, " ", n.color);
            printTreeNode(n.right, l+1);
        }
    }
    
    var _h = function(key)
    {
        if key == string(key)
            key = string(key) + "STR"
        else
            key = string(key) + "NUM"
        V a = 378551
        V b = 63689
        V hash = 0
        for i in range(0, len(key)) 
        {
            hash = hash * a + int(charAt(key, i))
            a = a * b
        }
        hash
    }
    
    V search = F(k)_s(_h(k), _root)
    
    
    V _s = F(h, n) {
        I (n.equals)(NIL) N
        E I _h(n.key)==h n.value
        E I h<_h(n.key)_s(h,n.left)
        E _s(h,n.right)
    }
    V _fn = F(h, n) {
        I (n.equals)(NIL) N
        E I _h(n.key)==h n
        E I h<_h(n.key)_fn(h,n.left)
        E _fn(h,n.right)
    }
    
    V _set = F(k, v) _a(_root, k, v)
    
    V _a = F(n, k, v)
        I (n.equals)(NIL) N
        E I _h(n.key) == _h(k) n.value = v
        E I _h(k) < _h(n.key) _a(n.left, k, v)
        E _a(n.right, k, v)
        
    V items = F()
    {
        var a = _items(_root)
        a
    }
    
    V _items = F(n)
    {
        if (n.equals)(NIL)
        {
            []
        }
        E I n.value == none
            _items(n.left) + _items(n.right)
        E
            [[n.key, n.value]] + _items(n.left) + _items(n.right)
    }
}


V a = Dictionary()
 
# insert some base values
(a.insert)(5, "five")
(a.insert)("3", "three")
(a.insert)(7.0, "seven")
(a.insert)("one", "one")
(a.insert)(6, "six")

# insert some duplicate values. they should overwrite their current values
(a.insert)(5, ["uh-oh"])
(a.insert)(5, none)
(a.insert)(5, "Testing")
(a.insert)("5", "string of 5")

# try to find a node that isn't in the dictionary
PL((a.search)(2))

# search for one that is
PL((a.search)(5))

# print out all the items in the dictionary. formats in pairs of [key, value]
PL((a.items)())

