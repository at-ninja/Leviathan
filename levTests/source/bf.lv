# bracemap idea adapted from pocmo's BF python implementation

include "../libs/dictMin.lv"

var intToChar = Dictionary()
var charToInt = Dictionary()
var alpha = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
var beta  = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
var counter = 65
for i in alpha
{
    (intToChar.add)(counter, i)
    (charToInt.add)(i, counter)
    (intToChar.add)(counter + 32, beta[counter - 65])
    (charToInt.add)(beta[counter - 65], counter + 32)

    counter = counter + 1
}
for i in range(0, 10)
{
    (intToChar.add)(48 + i, string(i))
    (charToInt.add)(string(i), 48 + i)
}
(intToChar.add)(32, " ")
(charToInt.add)(" ", 32)
(intToChar.add)(10, "\n")
(charToInt.add)("\n", 10)
(intToChar.add)(33, "!")
(charToInt.add)("!", 33)

var BF = class()
{
    # Set up initial things
    var cells = [0]
    var cellsptr = 0
    var inputLine = ""
    var inputLineptr = 0
    var bracemap = Dictionary()

    var getInput = function() {
        while !(inputLineptr < len(inputLine))
        {
            # Get a new batch of input
            inputLine = input()
            inputLineptr = 0
        }
        var result = charAt(inputLine, inputLineptr)
        inputLineptr = inputLineptr + 1

        result
    }

    
    var run = function(code) 
    {
        buildbracemap(code) 
        execute(code, 0) 
    }
    var execute = function(code, initCodeptr)
    {
        var codeptr = initCodeptr
        var result = codeptr
        var command = ""

        while codeptr < len(code)
        {
            # execute the command at codeptr, then move codeptr

            command = charAt(code, codeptr)

            if command == "+" cells[cellsptr] = cells[cellsptr] + 1
            if command == "-" cells[cellsptr] = cells[cellsptr] - 1
            if command == "." P((intToChar.get)(cells[cellsptr]))
            if command == "," cells[cellsptr] = (charToInt.get)(getInput())
            if command == ">"
            {
                if !(cellsptr < (len(cells) - 1))
                {
                    # extend the length of the array
                    cells = cells + [0]
                }
                cellsptr = cellsptr + 1
                #PL(cells, cellsptr)
            }
            if command == "<"
            {
                if cellsptr > 0
                {
                    cellsptr = cellsptr - 1
                }
                else
                {
                    cells = [0] + cells
                    cellsptr = 0
                }
            }
            if (command == "[") and (cells[cellsptr] == 0) codeptr = (bracemap.get)(codeptr)
            if (command == "]") and (!(cells[cellsptr] == 0)) codeptr = (bracemap.get)(codeptr)

            codeptr = codeptr + 1
        }

        result
    }

    var buildbracemap = F(code) {
        var temp_bracestack = []

        var command = ""
        var start = 0
        for counter in range(0, len(code))
        {
            command = charAt(code, counter)
            if command == "[" { temp_bracestack = temp_bracestack + [counter] }
            if command == "]"
            {
                start = temp_bracestack[len(temp_bracestack) - 1]
                temp_bracestack = pop(temp_bracestack)
                (bracemap.add)(start, counter)
                (bracemap.add)(counter, start)
            }
        }
    }

    var pop = F(lyst)
    {
        var temp = []
        for i in range(0, len(lyst) - 1)
            temp = temp + lyst[i]
        temp
    }
}

var bf = BF()


# Hello World!
(bf.run)("++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.")