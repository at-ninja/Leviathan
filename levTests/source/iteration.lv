#####################
# Iteration Test
# DPL Project
#####################



# Iteration in leviathan takes a few forms

# our options include the while loop and for loops

V a = 0
while a < 5
{
    println(a) a = a + 1
}

# while loops, as seen, are fairly simple structures, and function as expected
# the condition must evaluate to a boolean

# for loops, on the other hand, take a different approach
# they iterate over an array, and an identifier given to the loop
# will hold each value in the array

for x in [0,1,2,3,4]
    PL(x)
    
# for a more traditional for loop, we can use the range function 
# to generate an array of integers
# range is covered more in arrays.lv

for x in range(0, 5)
    PL(x)



# One thing to note is that the identifier for the loop only
# exists within the for loop
# This avoids any errors where that identifier is accessed outside of the for loop

var id = "I hold this value in the global scope"

PL(id)

# L is the short hand version of for. (L for loop)

L id in ["I hold this value in the for loop's scope"]
    PL(id)
    
PL(id)


